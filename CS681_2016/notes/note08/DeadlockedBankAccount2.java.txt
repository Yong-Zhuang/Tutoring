package edu.umb.cs.threads.basics;

import java.util.concurrent.locks.ReentrantLock;

public class DeadlockedBankAccount2{
	private double balance = 0;
	private ReentrantLock lock;
	private DeadlockedBankAccount2 account; 
	
	public DeadlockedBankAccount2(){
		lock = new ReentrantLock();
		account = this;
	}
	
	public void deposit(double amount){
		while( balance > 10000 ){
			try{
				System.out.print("W");
				Thread.sleep(2);
			}
			catch (InterruptedException e){}
		}
		lock.lock();
		try{
			System.out.println("Lock obtained");
			System.out.print("Current balance (d): " + balance);
			balance += amount;
			System.out.println(", New balance (d): " + balance);
		}
		finally{
			lock.unlock();
			System.out.println("Lock released");
		}
	}
	
	public void withdraw(double amount){
		while( balance <= 0 ){
			try{
				System.out.print("W");
				Thread.sleep(2);
			}
			catch (InterruptedException e){}
		}
		lock.lock();
		try{
			System.out.println("Lock obtained");
			System.out.print("Current balance (w): " + balance);
			balance -= amount;
			System.out.println(", New balance (w): " + balance);
		}
		finally{
			lock.unlock();
			System.out.println("Lock released");
		}
	}
	
	public static void main(String[] args){
		DeadlockedBankAccount2 bankAccount = new DeadlockedBankAccount2();
		new Thread( bankAccount.new DepositRunnable() ).start();
		new Thread( bankAccount.new WithdrawRunnable()).start();
	}
	
	private class DepositRunnable implements Runnable{
		public void run(){
			try{
				for(int i = 0; i < 10; i++){
					account.deposit(100);
					Thread.sleep(2);
				}
			}
			catch(InterruptedException exception){}
		}
	}
	
	private class WithdrawRunnable implements Runnable{
		public void run(){
			try{
				for(int i = 0; i < 10; i++){
					account.withdraw(100);
					Thread.sleep(2);
				}
			}
			catch(InterruptedException exception){}
		}
	}
}