package edu.umb.cs.threads.basics;

import java.util.concurrent.locks.ReentrantLock;

public class DeadlockedBankAccount{
	private double balance = 0;
	private ReentrantLock lock;
	private DeadlockedBankAccount account;
	
	public DeadlockedBankAccount(){
		lock = new ReentrantLock();
		account = this;
	}
	
	public void deposit(double amount){
		lock.lock();
		try{
			System.out.println("Lock obtained");
			System.out.print("Current balance (d): " + balance);
			while( balance > 10000 ){
				try{
					System.out.print("W");
					Thread.sleep(1000);
				}
				catch (InterruptedException e){}
			}
			balance += amount;
			System.out.println(", New balance (d): " + balance);
		}
		finally{
			lock.unlock();
			System.out.println("Lock released");
		}
	}
	
	public void withdraw(double amount){
		lock.lock();
		try{
			System.out.println("Lock obtained");
			System.out.print("Current balance (w): " + balance);
			while( balance <= 0 ){
				try{
					System.out.print("W");
					Thread.sleep(1000);
				}
				catch (InterruptedException e){}
			}
			balance -= amount;
			System.out.println(", New balance (w): " + balance);
		}
		finally{
			lock.unlock();
			System.out.println("Lock released");
		}
	}
	
	public static void main(String[] args){
		DeadlockedBankAccount bankAccount = new DeadlockedBankAccount();
		new Thread( bankAccount.new WithdrawRunnable()).start();
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {}
		new Thread( bankAccount.new DepositRunnable() ).start();
		
	}
	
	private class DepositRunnable implements Runnable{
		public void run(){
			try{
				for(int i = 0; i < 10; i++){
					account.deposit(100);
					Thread.sleep(2);
				}
			}
			catch(InterruptedException exception){}
		}
	}
	
	private class WithdrawRunnable implements Runnable{
		public void run(){
			try{
				for(int i = 0; i < 10; i++){
					account.withdraw(100);
					Thread.sleep(2);
				}
			}
			catch(InterruptedException exception){}
		}
	}
}